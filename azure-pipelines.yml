trigger:
- master

pr:
- master

resources:
- repo: self

stages:
- stage: Build
  displayName: Build & QA
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: JavaToolInstaller@0
      displayName: Ensure Java 11 
      inputs: # make sure Java 11 is installed and pointed to by JAVA_HOME, since the Sonar Scanner requires this to run
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    - task: Bash@3
      displayName: Build & Code Analysis
      inputs:
        targetType: 'inline'
        script: |
          dotnet restore
          dotnet tool restore
          dotnet tool run dotnet-sonarscanner begin /o:"raimondb" /k:"RaimondB_Detecticam"  /d:sonar.login="$(SONAR_TOKEN)" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.branch.name="$(Build.SourceBranchName)"
          dotnet test
          dotnet tool run dotnet-sonarscanner end /d:sonar.login="$(SONAR_TOKEN)"
      env:
        SONAR_TOKEN: $(SONAR_TOKEN)
    - task: Cache@2
      inputs:
        key: 'docker | "$(Agent.OS)" | caching-docker.yml'
        path: $(Pipeline.Workspace)/docker
        cacheHitVar: DOCKER_CACHE_RESTORED
      displayName: Caching Docker image
    - task: Bash@3
      displayName: Integration Tests
      inputs:
        targetType: 'inline'
        script: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker-compose -f DetectiCam/docker-compose.test.yml run sut
          docker image ls
          mkdir -p $(Pipeline.Workspace)/docker
          docker save detecticam_sut > $(Pipeline.Workspace)/docker/cache.tar
      env: #provide secrets this way to have them available as an environment variable in a secure way
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
- stage: Release
  displayName: Release a new image on Dockerhub
  condition:  and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Build
    displayName: Build Docker & Release to DockerHub
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Npm@1
      inputs: # Ensure that the semantic-release tool is installed as specified in the package.json
        command: 'install'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker load < $(Pipeline.Workspace)/docker/cache.tar
          docker tag detecticam_sut raimondb/detect-i-cam
          #docker build -f DetectiCam/Dockerfile . -t raimondb/detect-i-cam
          npx semantic-release
      env:
        GH_TOKEN: $(GH_TOKEN)
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)